//运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存机制 。 
//
// 
// 
// 实现 LRUCache 类： 
//
// 
// LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存 
// int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。 
// void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上
//限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。 
// 
//
// 
// 
// 
//
// 进阶：你是否可以在 O(1) 时间复杂度内完成这两种操作？ 
//
// 
//
// 示例： 
//
// 
//输入
//["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
//[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
//输出
//[null, null, null, 1, null, -1, null, -1, 3, 4]
//
//解释
//LRUCache lRUCache = new LRUCache(2);
//lRUCache.put(1, 1); // 缓存是 {1=1}
//lRUCache.put(2, 2); // 缓存是 {1=1, 2=2}
//lRUCache.get(1);    // 返回 1
//lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}
//lRUCache.get(2);    // 返回 -1 (未找到)
//lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}
//lRUCache.get(1);    // 返回 -1 (未找到)
//lRUCache.get(3);    // 返回 3
//lRUCache.get(4);    // 返回 4
// 
//
// 
//
// 提示： 
//
// 
// 1 <= capacity <= 3000 
// 0 <= key <= 3000 
// 0 <= value <= 104 
// 最多调用 3 * 104 次 get 和 put 
// 
// Related Topics 设计 哈希表 链表 双向链表 
// 👍 1467 👎 0

import java.util.HashMap;
import java.util.List;

//leetcode submit region begin(Prohibit modification and deletion)
class LRUCache {
    class ListNode {
        int key;
        int val;
        ListNode front;
        ListNode next;
        ListNode(int key,int value){
            this.key=key;
            this.val=value;
        }

    }

    ListNode head;
    ListNode tail;
    HashMap<Integer,ListNode> hashMap =new HashMap<Integer, ListNode>();
    int size=0;
    int maxsize;

    public LRUCache(int capacity) {
        maxsize=capacity;
    }
    
    public int get(int key) {
        ListNode currentNode= hashMap.get(key);
        if(currentNode==null) return -1;
        deleteNode(currentNode);
        addNode(currentNode);
        return currentNode.val;
        
    }
    
    public void put(int key, int value) {

        ListNode currentNode= hashMap.get(key);
        //System.out.println("size:"+" "+size);
        //System.out.println("currentNode:"+" "+currentNode);
        //System.out.println("tail:"+" "+tail);




        if(currentNode==null&&size==maxsize){
            //System.out.println("tail:"+" "+tail.key+" "+tail.val);


            hashMap.remove(tail.key);
            
            deleteNode(tail);
            size--;
        }
        else if(currentNode!=null){
            deleteNode(currentNode);
            size--;
        }
        currentNode=new ListNode(key,value);

        addNode(currentNode);
        //System.out.println(" "+currentNode.key+" "+currentNode.val);
        hashMap.put(key,currentNode);
        size++;


    }
    private void  deleteNode(ListNode node){
        
        if(node==null) return;
        //System.out.println("deletenode:"+node.key+" "+node.val+" node.next:"+node.next);
        if(node.front!=null){
            node.front.next=node.next;

        } else {
            head=node.next;
        }
        if(node.next!=null){
            node.next.front=node.front;
        }else {
            //System.out.println("tail:"+tail);
            tail=node.front;
        }
        node.front=null;
        node.next=null;


    }
    private  void  addNode(ListNode node){
        if(node==null) return;


        //System.out.println("atail:"+tail);
        if(head==null){
            head=node;
            tail=node;
        }else{
            node.next=head;
            head.front=node;
            head=node;
        }
        //System.out.println("addnode:"+node.key+" "+node.val);

    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
//leetcode submit region end(Prohibit modification and deletion)
